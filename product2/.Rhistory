library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loading the functions
#source("sourceAll.R")
size = 100
replicationCount = getReplicationCountFromSampleSize(size)
fileName <- "productCol_lrv"
fileName <- timestampGenerator(fileName = fileName)
psi = 0.5
# psi = 0 # makes it iid
sigma = 1
mean = 0
cMatrix <- createCMatrix(size = size,
psi = psi,
sigma = sigma)
lrvProductColReplicated = cMatrix [1,] + 2 * cMatrix [2,]
xArray <- 1:(size-1)
NlrvProductColReplicatedHat <- 5
lrvProductColReplicatedHatArray <- matrix(NA, nrow = size - 1,ncol = NlrvProductColReplicatedHat)
subtitle <- paste("lag\n","size=replicationcount = ",size,"\npsi = ",psi,
", sigma = ", sigma, ", mean = ", mean)
for(index in 1:NlrvProductColReplicatedHat)
{
originalReplicated <- createOriginalMA1Replicated(replicationCount = replicationCount,
size = size,
psi = psi,
sigma = sigma)
productColReplicated <- createProductColReplicated(originalReplicated = originalReplicated)
lrvHat <- createLRVof3dArray(array3d = productColReplicated)
lrvProductColReplicatedHatArray[,index] <- lrvHat
df <- data.frame(lrvProductColReplicated,lrvProductColReplicatedHatArray)
max <- max(df, na.rm = TRUE)
min <- min(df, na.rm = TRUE)
saveJpg("productCol_lrv","./plots/")
plot(lrvProductColReplicated ~ xArray, type = "n",col = "red",ylim = c(min,max),xlab  = "")
title(main="ProductCol lrv & lrvHat",sub = subtitle)
lineArray <- c("ProductColLRV","ProductColLRVHat")
legend("topright",
title = "LRV",
lineArray,
fill = c("red","blue"))
for(index in 1:NlrvProductColReplicatedHat)
{
lines( lrvProductColReplicatedHatArray[,index]~xArray,col="blue")
}
lines(lrvProductColReplicated ~ xArray,col = "red")
graphics.off()
}
=======
size = 10
replicationCount = getReplicationCountFromSampleSize(size)
psi = 0.5
# psi = 0 # makes it iid
sigma = 1
mean = 0
gamma0 = sigma ^ 2 * (1 + psi ^ 2)
rho = rep(0, length = size-1)
rho [1] = psi / (1 + psi ^ 2)
dMatrix <- createDMatrix(size = size,
psi = psi,
sigma = sigma)
lrvBetaArrayReplicated = dMatrix [1,] + 2 * dMatrix [2,]
originalReplicated <- createOriginalMA1Replicated(replicationCount = replicationCount,
size = size,
psi = psi,
sigma = sigma)
betaArrayReplicated <- createBetaArrayReplicated(originalReplicated = originalReplicated,
size = size,
replicationCount = replicationCount,
rho = rho)
traceback()
if (!require("rstudioapi"))
install.packages("rstudioapi")
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
size = 10
replicationCount = getReplicationCountFromSampleSize(size)
psi = 0.5
# psi = 0 # makes it iid
sigma = 1
mean = 0
gamma0 = sigma ^ 2 * (1 + psi ^ 2)
rho = rep(0, length = size-1)
rho [1] = psi / (1 + psi ^ 2)
dMatrix <- createDMatrix(size = size,
psi = psi,
sigma = sigma)
lrvBetaArrayReplicated = dMatrix [1,] + 2 * dMatrix [2,]
muOriginal <- createOriginalMA1(                                                  size = size,
psi = psi,
sigma = sigma)
myBetaArray <- createBetaArray(original = myOriginal,
rho = rho,
gamma0 = gamma0)
gamma0 = sigma ^ 2 * (1 + psi ^ 2)
myOriginal <- createOriginalMA1(size = size,
psi = psi,
sigma = sigma)
myBetaArray <- createBetaArray(original = myOriginal,
rho = rho,
gamma0 = gamma0)
=======
>>>>>>> 8d0852f23676049f3b45e12c4f1679d48f3ba236
devtools::load_all(".")
if (!require("rstudioapi"))
install.packages("rstudioapi")
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
size = 10
psi = 0.5
# psi = 0 # makes it iid
sigma = 1
mean = 0
rho = rep(0, length = size-1)
rho [1] = psi / (1 + psi ^ 2)
gamma0 = sigma ^ 2 * (1 + psi ^ 2)
myOriginal <- createOriginalMA1(size = size,
psi = psi,
sigma = sigma)
myBetaArray <- createBetaArray(original = myOriginal,
rho = rho,
gamma0 = gamma0)
#' @title createBetaArray
#'
#' @name createBetaArray
#'
#' @aliases createBetaArray
#'
#' @description Creating a two-dimensional array of dimensions \code{c(size - 1, size)}.
#'
#' @param original A one-dimensional array created using \code{stats::arima.sim()}, passing \code{size} as the length of the array.
#' @param rho A \code{rho} parameter.
#' @param gamma0 A \code{gamma0} parameter, the true variance of the process.
#'
#' @return Returning a two-dimensional array of dimensions \code{c(size - 1, size)}.
#'
#' @examples
#' original <- createOriginalMA1(size = 10, psi = 0.5, sigma = 1)
#' createBetaArray <- function(original, rho = 0.5)
#'
#' @export
createBetaArray <- function(original,
rho,
gamma0) {
size <- length(original)
betaArray <- array(NA, dim = c(size-1, size))
lag = 1
while ((size - lag) > 0) {
for (rowIndex in 1:(size - 1)) {
for (colIndex in 1:(size - lag + 1)) {
myBeta =
original[rowIndex] *
# (original[colIndex + lag - 1] - rho[rowIndex] * original[rowIndex])
(original[colIndex + lag - 1] - rho * original[rowIndex])
betaArray[rowIndex, colIndex] <- myBeta
}
lag = lag + 1
}
}
betaArray [, 1] = 0
betaArray = betaArray / gamma0
# betaArray <- array(as.numeric(unlist(betaArray)), dim = c(size-1, size))
# betaArray <- as.data.frame(betaArray)
# colnames(betaArray) <- as.character(0:(length(original) - 1))
betaArray
}
devtools::load_all("C:/Users/Boris/OneDrive/text/toronto_u/research/zhou/r/product2/product2")
if (!require("rstudioapi"))
install.packages("rstudioapi")
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
size = 10
psi = 0.5
# psi = 0 # makes it iid
sigma = 1
mean = 0
rho = rep(0, length = size-1)
rho [1] = psi / (1 + psi ^ 2)
gamma0 = sigma ^ 2 * (1 + psi ^ 2)
myOriginal <- createOriginalMA1(size = size,
psi = psi,
sigma = sigma)
myBetaArray <- createBetaArray(original = myOriginal,
rho = rho,
gamma0 = gamma0)
devtools::load_all("C:/Users/Boris/OneDrive/text/toronto_u/research/zhou/r/product2/product2")
if (!require("rstudioapi"))
install.packages("rstudioapi")
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
size = 10
psi = 0.5
# psi = 0 # makes it iid
sigma = 1
mean = 0
rho = rep(0, length = size-1)
rho [1] = psi / (1 + psi ^ 2)
gamma0 = sigma ^ 2 * (1 + psi ^ 2)
myOriginal <- createOriginalMA1(size = size,
psi = psi,
sigma = sigma)
myBetaArray <- createBetaArray(original = myOriginal,
rho = rho,
gamma0 = gamma0)
devtools::load_all("C:/Users/Boris/OneDrive/text/toronto_u/research/zhou/r/product2/product2")
if (!require("rstudioapi"))
install.packages("rstudioapi")
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
size = 10
psi = 0.5
# psi = 0 # makes it iid
sigma = 1
mean = 0
rho = rep(0, length = size-1)
rho [1] = psi / (1 + psi ^ 2)
gamma0 = sigma ^ 2 * (1 + psi ^ 2)
myOriginal <- createOriginalMA1(size = size,
psi = psi,
sigma = sigma)
myBetaArray <- createBetaArray(original = myOriginal,
rho = rho,
gamma0 = gamma0)
devtools::load_all("C:/Users/Boris/OneDrive/text/toronto_u/research/zhou/r/product2/product2")
if (!require("rstudioapi"))
install.packages("rstudioapi")
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
size = 10
psi = 0.5
# psi = 0 # makes it iid
sigma = 1
mean = 0
rho = rep(0, length = size-1)
rho [1] = psi / (1 + psi ^ 2)
gamma0 = sigma ^ 2 * (1 + psi ^ 2)
myOriginal <- createOriginalMA1(size = size,
psi = psi,
sigma = sigma)
myBetaArray <- createBetaArray(original = myOriginal,
rho = rho,
gamma0 = gamma0)
<<<<<<< HEAD
>>>>>>> bf63c4fdb4424713b5250b64ffbdfa4f2296d202
test_that(desc = "Testing createBetaArray",
code = {
testUtilCreateBetaArray(replicationCount = 10,
size = 10,
psi = 0.5,
sigma = 1)
})
library(testthat)
test_that(desc = "Testing createBetaArray",
code = {
testUtilCreateBetaArray(replicationCount = 10,
size = 10,
psi = 0.5,
sigma = 1)
})
devtools::load_all(".")
test_that(desc = "Testing createBetaArray",
code = {
testUtilCreateBetaArray(replicationCount = 10,
size = 10,
psi = 0.5,
sigma = 1)
})
if (!require("rstudioapi"))
install.packages("rstudioapi")
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
size = 10
psi = 0.5
# psi = 0 # makes it iid
sigma = 1
mean = 0
rho = rep(0, length = size-1)
# version 1
rho [1] = 1
rho [2] = psi / (1 + psi ^ 2)
# version 2
rho [1] =  psi / (1 + psi ^ 2)
gamma0 = sigma ^ 2 * (1 + psi ^ 2)
myOriginal <- createOriginalMA1(size = size,
psi = psi,
sigma = sigma)
myBetaArray <- createBetaArray(original = myOriginal,
rho = rho,
gamma0 = gamma0)
devtools::load_all("C:/Users/MKS/product2/product2")
if (!require("rstudioapi"))
install.packages("rstudioapi")
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
size = 10
psi = 0.5
# psi = 0 # makes it iid
sigma = 1
mean = 0
rho = rep(0, length = size-1)
# version 1
rho [1] = 1
rho [2] = psi / (1 + psi ^ 2)
# version 2
rho [1] =  psi / (1 + psi ^ 2)
gamma0 = sigma ^ 2 * (1 + psi ^ 2)
myOriginal <- createOriginalMA1(size = size,
psi = psi,
sigma = sigma)
myBetaArray <- createBetaArray(original = myOriginal,
rho = rho,
gamma0 = gamma0)
if (!require("rstudioapi"))
install.packages("rstudioapi")
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
size = 10
psi = 0.5
# psi = 0 # makes it iid
sigma = 1
mean = 0
rho = rep(0, length = size-1)
# version 1
rho [1] = 1
rho [2] = psi / (1 + psi ^ 2)
# version 2
rho [1] =  psi / (1 + psi ^ 2)
gamma0 = sigma ^ 2 * (1 + psi ^ 2)
=======
gamma <- rep(0, 2)
0.5 ^2
gamma <- rep(0, 2)
gamma[1] <- ((sigma ^ 2) * (1 + (psi ^ 2))) # a.k.a gamma0
sigma = 1
psi = 0.5
gamma[1] <- ((sigma ^ 2) * (1 + (psi ^ 2))) # a.k.a gamma0
gamma[2] <- (psi * (sigma ^ 2)) # a.k.a gamma0
gamma
gamma <- rep(0, 2)
gamma
library(product2)
>>>>>>> 6fcdb9c6a5663626e39e32e1f308ff33426d02bb
devtools::load_all(".")
test_that(desc = "Testing createLRVof2dArray",
code = {
testUtilCreateLRVof2dArray(size = 10,psi = 0.5,sigma = 1)
})
library(testthat)
test_that(desc = "Testing createLRVof2dArray",
code = {
testUtilCreateLRVof2dArray(size = 10,psi = 0.5,sigma = 1)
})
testUtilCreateLRVof2dArray <- function(size,
psi,
sigma) {
cat("\nTesting \'tests_30_CreateLRVof2dArray\' \n")
Start <- Sys.time()
original <- createOriginalMA1(size = size, psi = psi, sigma = sigma)
productCol <- createProductCol(original)
LVR2dArray=createLRVof2dArray(productCol)
End <- Sys.time()
duration <- End - Start
cat(" - dimensions of betaArray are correct. \n")
cat("Duration =", duration, "\n")
cat("dimOfLRV2dArray =", LVR2dArray[1:3, 2:3], "\n")
cat("Test parameters:", "\n")
cat("size =", size, "\n")
cat("psi =", psi, "\n")
cat("sigma =", sigma, "\n")
cat("original =", original[1:5], "\n")
cat("End of test createBetaArray","\n")
cat("=====================")
}
test_that(desc = "Testing createLRVof2dArray",
code = {
testUtilCreateLRVof2dArray(size = 10,psi = 0.5,sigma = 1)
})
testUtilCreateLRVof2dArray <- function(size,
psi,
sigma) {
cat("\nTesting \'tests_30_CreateLRVof2dArray\' \n")
Start <- Sys.time()
original <- createOriginalMA1(size = size, psi = psi, sigma = sigma)
productCol <- createProductCol(original)
LVR2dArray=createLRVof2dArray(productCol)
End <- Sys.time()
duration <- End - Start
cat(" - dimensions of betaArray are correct. \n")
cat("Duration =", duration, "\n")
cat("dimOfLRV2dArray =", LVR2dArray[1:3], "\n")
cat("Test parameters:", "\n")
cat("size =", size, "\n")
cat("psi =", psi, "\n")
cat("sigma =", sigma, "\n")
cat("original =", original[1:5], "\n")
cat("End of test createBetaArray","\n")
cat("=====================")
}
test_that(desc = "Testing createLRVof2dArray",
code = {
testUtilCreateLRVof2dArray(size = 10,psi = 0.5,sigma = 1)
})
testUtilCreateLRVof2dArray <- function(size,
psi,
sigma) {
cat("\nTesting \'tests_30_CreateLRVof2dArray\' \n")
Start <- Sys.time()
original <- createOriginalMA1(size = size, psi = psi, sigma = sigma)
productCol <- createProductCol(original)
LVR2dArray=createLRVof2dArray(productCol)
End <- Sys.time()
duration <- End - Start
cat(" - dimensions of betaArray are correct. \n")
cat("Duration =", duration, "\n")
cat("dimOfLRV2dArray =", LVR2dArray, "\n")
cat("Test parameters:", "\n")
cat("size =", size, "\n")
cat("psi =", psi, "\n")
cat("sigma =", sigma, "\n")
cat("original =", original[1:5], "\n")
cat("End of test createBetaArray","\n")
cat("=====================")
}
test_that(desc = "Testing createBetaArray",
code = {
testUtilCreateBetaArray(size = 10,
psi = 0.5,
sigma = 1)
})
test_that(desc = "Testing createLRVof2dArray",
code = {
testUtilCreateLRVof2dArray(size = 10,psi = 0.5,sigma = 1)
})
test_that(desc = "Testing createLRVof3dArray",
code = {
testUtilCreateLRVof3dArray(replicationCount = 10,size = 10,psi = 0.5,sigma = 1)
})
testUtilCreateLRVof3dArray(replicationCount = 10,size = 10,psi = 0.5,sigma = 1)
test_that(desc = "Testing createLRVof3dArray",
code = {
testUtilCreateLRVof3dArray(replicationCount = 10,size = 10,psi = 0.5,sigma = 1)
})
devtools::load_all(".")
test_that(desc = "Testing createLRVof3dArray",
code = {
testUtilCreateLRVof3dArray(replicationCount = 10,size = 10,psi = 0.5,sigma = 1)
})
test_that(desc = "Testing createLRVof3dArray",
code = {
testUtilCreateLRVof3dArray(replicationCount = 10,size = 10,psi = 0.5,sigma = 1)
})
testUtilCreateLRVof3dArray(replicationCount = 10,size = 10,psi = 0.5,sigma = 1)
test_that(desc = "Testing createLRVof3dArray",
code = {
testUtilCreateLRVof3dArray(replicationCount = 10,size = 10,psi = 0.5,sigma = 1)
})
devtools::load_all(".")
library(product2)
library(testthat)
test_that(desc = "Testing createLRVof3dArray",
code = {
testUtilCreateLRVof3dArray(replicationCount = 10,size = 10,psi = 0.5,sigma = 1)
})
test_that(desc = "Testing createLRVof3dArray",
code = {
testUtilCreateLRVof3dArray(replicationCount = 10,size = 10,psi = 0.5,sigma = 1)
})
test_that(desc = "Testing createLRVof3dArray",
code = {
testUtilCreateLRVof3dArray(replicationCount = 10,size = 10,psi = 0.5,sigma = 1)
})
devtools::load_all(".")
test_that(desc = "Testing createLRVof3dArray",
code = {
testUtilCreateLRVof3dArray(replicationCount = 10,size = 10,psi = 0.5,sigma = 1)
})
test_that(desc = "Testing createLRVof3dArray",
code = {
testUtilCreateLRVof3dArray(replicationCount = 10,size = 10,psi = 0.5,sigma = 1)
})
devtools::load_all(".")
test_that(desc = "Testing createLRVof3dArray",
code = {
testUtilCreateLRVof3dArray(replicationCount = 10,size = 10,psi = 0.5,sigma = 1)
})
test_that(desc = "Testing createLRVof2dArray",
code = {
testUtilCreateLRVof2dArray(size = 10,psi = 0.5,sigma = 1)
})
devtools::load_all(".")
library()
library(testthat)
test_that(desc = "Testing createLRVof2dArray",
code = {
testUtilCreateLRVof2dArray(size = 10,psi = 0.5,sigma = 1)
})
library(product2)
devtools::load_all(".")
test_that(desc = "Testing createLRVof2dArray",
code = {
testUtilCreateLRVof2dArray(size = 10,psi = 0.5,sigma = 1)
})
test_that(desc = "Testing createLRVof3dArray",
code = {
testUtilCreateLRVof3dArray(replicationCount = 10,size = 10,psi = 0.5,sigma = 1)
})
test_that(desc = "Testing createBetaArray",
code = {
testUtilCreateBetaArray(size = 10,
psi = 0.5,
sigma = 1)
})
