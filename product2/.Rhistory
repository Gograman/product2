if (!require("rstudioapi"))
install.packages("rstudioapi")
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
sizeArray <- seq(10,5000,by = 100)
psi = .5
sigma = 1
gamma0 = sigma ^ 2 * (1 + psi ^ 2)
gamma1 = psi * sigma^2
lrvOriginal = gamma0 + 2 * gamma1
lrvOriginalArray<-rep(lrvOriginal,length(sizeArray))
lrvOriginalHatArray <- rep(NA,length(sizeArray))
for(index in 1:length(sizeArray))
for(index in 1:length(sizeArray))
{
replicationCount <- getReplicationCountFromSampleSize(sizeArray[index])
originalReplicated <- createOriginalMA1Replicated(replicationCount = replicationCount,
size = sizeArray[index],
psi = psi,
sigma = sigma)
lrvOriginalHatArray[index] <- createLRVof2dArray(array2d = originalReplicated)
yMax <- max(lrvOriginalHatArray, na.rm = TRUE)
yMin <- min(lrvOriginalHatArray, na.rm = TRUE)
saveJpg("origin_lrv_size","./plots/",timeStamp = FALSE)
plot(lrvOriginalArray~sizeArray,type="l",ylim = c(yMin-0.01,yMax+0.01),col="blue",xlab="",
ylab = "lrv and LRVHat")
points(lrvOriginalHatArray~sizeArray,pch=20)
title("Original lrv and lrvHat","replicationCount==size")
graphics.off()
}
if (!require("rstudioapi"))
install.packages("rstudioapi")
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
sizeArray <- seq(10,2000,by = 100)
psi = .5
sigma = 1
gamma0 = sigma ^ 2 * (1 + psi ^ 2)
gamma1 = psi * sigma^2
lrvOriginal = gamma0 + 2 * gamma1
lrvOriginalArray<-rep(lrvOriginal,length(sizeArray))
lrvOriginalHatArray <- rep(NA,length(sizeArray))
for(index in 1:length(sizeArray))
{
replicationCount <- getReplicationCountFromSampleSize(sizeArray[index])
originalReplicated <- createOriginalMA1Replicated(replicationCount = replicationCount,
size = sizeArray[index],
psi = psi,
sigma = sigma)
lrvOriginalHatArray[index] <- createLRVof2dArray(array2d = originalReplicated)
yMax <- max(lrvOriginalHatArray, na.rm = TRUE)
yMin <- min(lrvOriginalHatArray, na.rm = TRUE)
saveJpg("origin_lrv_size","./plots/",timeStamp = FALSE)
plot(lrvOriginalArray~sizeArray,type="l",ylim = c(yMin-0.01,yMax+0.01),col="blue",xlab="",
ylab = "lrv and LRVHat")
points(lrvOriginalHatArray~sizeArray,pch=20)
title("Original lrv and lrvHat","replicationCount==size")
graphics.off()
}
yMax <- max(lrvOriginalHatArray)
yMin <- min(lrvOriginalHatArray)
saveJpg("origin_lrv_size","./plots/")
plot(lrvOriginalArray~sizeArray,type="l",ylim = c(yMin-0.01,yMax+0.01),col="blue",xlab="",
ylab = "lrv and LRVHat")
points(lrvOriginalHatArray~sizeArray,pch=20)
title("Original lrv and lrvHat","replicationCount==size")
graphics.off()
View(originalReplicated)
paste
if (!require("rstudioapi"))
install.packages("rstudioapi")
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
sizeArray <- seq(10,2000,by = 100)
psi = .5
sigma = 1
gamma0 = sigma ^ 2 * (1 + psi ^ 2)
gamma1 = psi * sigma^2
lrvOriginal = gamma0 + 2 * gamma1
subtitle <- paste("replicationCount = size","\npsi = ",psi,", sigma = ",sigma)
lrvOriginalArray<-rep(lrvOriginal,length(sizeArray))
lrvOriginalHatArray <- rep(NA,length(sizeArray))
for(index in 1:length(sizeArray))
{
replicationCount <- getReplicationCountFromSampleSize(sizeArray[index])
originalReplicated <- createOriginalMA1Replicated(replicationCount = replicationCount,
size = sizeArray[index],
psi = psi,
sigma = sigma)
lrvOriginalHatArray[index] <- createLRVof2dArray(array2d = originalReplicated)
yMax <- max(lrvOriginalHatArray, na.rm = TRUE)
yMin <- min(lrvOriginalHatArray, na.rm = TRUE)
saveJpg("origin_lrv_size","./plots/",timeStamp = FALSE)
plot(lrvOriginalArray~sizeArray,type="l",ylim = c(yMin-0.01,yMax+0.01),col="blue",xlab="",
ylab = "lrv and LRVHat")
points(lrvOriginalHatArray~sizeArray,pch=20)
title("Original lrv and lrvHat",subtitle)
graphics.off()
}
yMax <- max(lrvOriginalHatArray)
yMin <- min(lrvOriginalHatArray)
saveJpg("origin_lrv_size","./plots/")
plot(lrvOriginalArray~sizeArray,type="l",ylim = c(yMin-0.01,yMax+0.01),col="blue",xlab="",
ylab = "lrv and LRVHat")
points(lrvOriginalHatArray~sizeArray,pch=20)
title("Original lrv and lrvHat",subtitle)
graphics.off()
install.packages("benchmark")
devtools::load_all(".")
original <- createOriginalMA1(size = size,
psi = psi,
sigma = sigma)
{curTime <-format(Sys.time(),"%M_%S")}
devtools::load_all(".")
if (!require("rstudioapi"))
install.packages("rstudioapi")
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
sizeArray <- seq(10,2000,by = 100)
psi = .5
sigma = 1
fileName <- "origin_lrv_size"
fileName <- timestampGenerator(fileName = fileName)
gamma0 = sigma ^ 2 * (1 + psi ^ 2)
gamma1 = psi * sigma^2
lrvOriginal = gamma0 + 2 * gamma1
subtitle <- paste("replicationCount = size","\npsi = ",psi,", sigma = ",sigma)
lrvOriginalArray<-rep(lrvOriginal,length(sizeArray))
lrvOriginalHatArray <- rep(NA,length(sizeArray))
for(index in 1:length(sizeArray))
{
replicationCount <- getReplicationCountFromSampleSize(sizeArray[index])
originalReplicated <- createOriginalMA1Replicated(replicationCount = replicationCount,
size = sizeArray[index],
psi = psi,
sigma = sigma)
lrvOriginalHatArray[index] <- createLRVof2dArray(array2d = originalReplicated)
yMax <- max(lrvOriginalHatArray, na.rm = TRUE)
yMin <- min(lrvOriginalHatArray, na.rm = TRUE)
saveJpg(fileName,"./plots/",timeStamp = FALSE)
plot(lrvOriginalArray~sizeArray,type="l",ylim = c(yMin-0.01,yMax+0.01),col="blue",xlab="",
ylab = "lrv and LRVHat")
points(lrvOriginalHatArray~sizeArray,pch=20)
title("Original lrv and lrvHat",subtitle)
graphics.off()
}
if (!require("rstudioapi"))
install.packages("rstudioapi")
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
sizeArray <- seq(10,2000,by = 100)
psi = .5
sigma = 1
fileName <- "origin_lrv_size"
fileName <- timestampGenerator(fileName = fileName)
gamma0 = sigma ^ 2 * (1 + psi ^ 2)
gamma1 = psi * sigma^2
lrvOriginal = gamma0 + 2 * gamma1
subtitle <- paste("replicationCount = size","\npsi = ",psi,", sigma = ",sigma)
lrvOriginalArray<-rep(lrvOriginal,length(sizeArray))
lrvOriginalHatArray <- rep(NA,length(sizeArray))
for(index in 1:length(sizeArray))
{
replicationCount <- getReplicationCountFromSampleSize(sizeArray[index])
originalReplicated <- createOriginalMA1Replicated(replicationCount = replicationCount,
size = sizeArray[index],
psi = psi,
sigma = sigma)
lrvOriginalHatArray[index] <- createLRVof2dArray(array2d = originalReplicated)
yMax <- max(lrvOriginalHatArray, na.rm = TRUE)
yMin <- min(lrvOriginalHatArray, na.rm = TRUE)
saveJpg(fileName,"./plots/")
plot(lrvOriginalArray~sizeArray,type="l",ylim = c(yMin-0.01,yMax+0.01),col="blue",xlab="",
ylab = "lrv and LRVHat")
points(lrvOriginalHatArray~sizeArray,pch=20)
title("Original lrv and lrvHat",subtitle)
graphics.off()
}
if (!require("rstudioapi"))
install.packages("rstudioapi")
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
sizeArray <- seq(10,2000,by = 100)
psi = .5
sigma = 1
fileName <- "origin_lrv_size"
fileName <- timestampGenerator(fileName = fileName)
gamma0 = sigma ^ 2 * (1 + psi ^ 2)
gamma1 = psi * sigma^2
lrvOriginal = gamma0 + 2 * gamma1
subtitle <- paste("replicationCount = size","\npsi = ",psi,", sigma = ",sigma)
lrvOriginalArray<-rep(lrvOriginal,length(sizeArray))
lrvOriginalHatArray <- rep(NA,length(sizeArray))
for(index in 1:length(sizeArray))
{
replicationCount <- getReplicationCountFromSampleSize(sizeArray[index])
originalReplicated <- createOriginalMA1Replicated(replicationCount = replicationCount,
size = sizeArray[index],
psi = psi,
sigma = sigma)
lrvOriginalHatArray[index] <- createLRVof2dArray(array2d = originalReplicated)
yMax <- max(lrvOriginalHatArray, na.rm = TRUE)
yMin <- min(lrvOriginalHatArray, na.rm = TRUE)
saveJpg(fileName,"./plots/")
plot(lrvOriginalArray~sizeArray,type="l",ylim = c(yMin-0.01,yMax+0.01),col="blue",xlab="",
ylab = "lrv and LRVHat")
points(lrvOriginalHatArray~sizeArray,pch=20)
title("Original lrv and lrvHat",subtitle)
graphics.off()
}
# setwd() to the dir where the script have been stored
if (!require("rstudioapi"))
install.packages("rstudioapi")
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loading the functions
#source("sourceAll.R")
size = 100
replicationCount = getReplicationCountFromSampleSize(size)
fileName <- "productCol_lrv"
fileName <- timestampGenerator(fileName = fileName)
psi = 0.5
# psi = 0 # makes it iid
sigma = 1
mean = 0
cMatrix <- createCMatrix(size = size,
psi = psi,
sigma = sigma)
lrvProductColReplicated = cMatrix [1,] + 2 * cMatrix [2,]
xArray <- 1:(size-1)
NlrvProductColReplicatedHat <- 5
lrvProductColReplicatedHatArray <- matrix(0, nrow = size - 1,ncol = NlrvProductColReplicatedHat)
subtitle <- paste("lag\n","size=replicationcount = ",size,"\npsi = ",psi,
", sigma = ", sigma, ", mean = ", mean)
for(index in 1:NlrvProductColReplicatedHat)
{
originalReplicated <- createOriginalMA1Replicated(replicationCount = replicationCount,
size = size,
psi = psi,
sigma = sigma)
productColReplicated <- createProductColReplicated(originalReplicated = originalReplicated)
lrvHat <- createLRVof3dArray(array3d = productColReplicated)
lrvProductColReplicatedHatArray[,index] <- lrvHat
df <- data.frame(lrvProductColReplicated,lrvProductColReplicatedHatArray)
max <- max(df)
min <- min(df)
saveJpg("productCol_lrv","./plots/")
plot(lrvProductColReplicated ~ xArray, type = "l",col = "red",ylim = c(min,max),xlab  = "")
title(main="ProductCol lrv & lrvHat",sub = subtitle)
lineArray <- c("ProductColLRV","ProductColLRVHat")
legend("topright",
title = "LRV",
lineArray,
fill = c("red","blue"))
for(index in 1:NlrvProductColReplicatedHat)
{
lines( lrvProductColReplicatedHatArray[,index]~xArray,col="blue")
}
graphics.off()
}
# setwd() to the dir where the script have been stored
if (!require("rstudioapi"))
install.packages("rstudioapi")
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loading the functions
#source("sourceAll.R")
size = 100
replicationCount = getReplicationCountFromSampleSize(size)
fileName <- "productCol_lrv"
fileName <- timestampGenerator(fileName = fileName)
psi = 0.5
# psi = 0 # makes it iid
sigma = 1
mean = 0
cMatrix <- createCMatrix(size = size,
psi = psi,
sigma = sigma)
lrvProductColReplicated = cMatrix [1,] + 2 * cMatrix [2,]
xArray <- 1:(size-1)
NlrvProductColReplicatedHat <- 5
lrvProductColReplicatedHatArray <- matrix(NA, nrow = size - 1,ncol = NlrvProductColReplicatedHat)
subtitle <- paste("lag\n","size=replicationcount = ",size,"\npsi = ",psi,
", sigma = ", sigma, ", mean = ", mean)
for(index in 1:NlrvProductColReplicatedHat)
{
originalReplicated <- createOriginalMA1Replicated(replicationCount = replicationCount,
size = size,
psi = psi,
sigma = sigma)
productColReplicated <- createProductColReplicated(originalReplicated = originalReplicated)
lrvHat <- createLRVof3dArray(array3d = productColReplicated)
lrvProductColReplicatedHatArray[,index] <- lrvHat
df <- data.frame(lrvProductColReplicated,lrvProductColReplicatedHatArray)
max <- max(df)
min <- min(df)
saveJpg("productCol_lrv","./plots/")
plot(lrvProductColReplicated ~ xArray, type = "l",col = "red",ylim = c(min,max),xlab  = "")
title(main="ProductCol lrv & lrvHat",sub = subtitle)
lineArray <- c("ProductColLRV","ProductColLRVHat")
legend("topright",
title = "LRV",
lineArray,
fill = c("red","blue"))
for(index in 1:NlrvProductColReplicatedHat)
{
lines( lrvProductColReplicatedHatArray[,index]~xArray,col="blue")
}
graphics.off()
}
?max
# setwd() to the dir where the script have been stored
if (!require("rstudioapi"))
install.packages("rstudioapi")
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loading the functions
#source("sourceAll.R")
size = 100
replicationCount = getReplicationCountFromSampleSize(size)
fileName <- "productCol_lrv"
fileName <- timestampGenerator(fileName = fileName)
psi = 0.5
# psi = 0 # makes it iid
sigma = 1
mean = 0
cMatrix <- createCMatrix(size = size,
psi = psi,
sigma = sigma)
lrvProductColReplicated = cMatrix [1,] + 2 * cMatrix [2,]
xArray <- 1:(size-1)
NlrvProductColReplicatedHat <- 5
lrvProductColReplicatedHatArray <- matrix(NA, nrow = size - 1,ncol = NlrvProductColReplicatedHat)
subtitle <- paste("lag\n","size=replicationcount = ",size,"\npsi = ",psi,
", sigma = ", sigma, ", mean = ", mean)
for(index in 1:NlrvProductColReplicatedHat)
{
originalReplicated <- createOriginalMA1Replicated(replicationCount = replicationCount,
size = size,
psi = psi,
sigma = sigma)
productColReplicated <- createProductColReplicated(originalReplicated = originalReplicated)
lrvHat <- createLRVof3dArray(array3d = productColReplicated)
lrvProductColReplicatedHatArray[,index] <- lrvHat
df <- data.frame(lrvProductColReplicated,lrvProductColReplicatedHatArray)
max <- max(df, na.rm = FALSE)
min <- min(df, na.rm = FALSE)
saveJpg("productCol_lrv","./plots/")
plot(lrvProductColReplicated ~ xArray, type = "l",col = "red",ylim = c(min,max),xlab  = "")
title(main="ProductCol lrv & lrvHat",sub = subtitle)
lineArray <- c("ProductColLRV","ProductColLRVHat")
legend("topright",
title = "LRV",
lineArray,
fill = c("red","blue"))
for(index in 1:NlrvProductColReplicatedHat)
{
lines( lrvProductColReplicatedHatArray[,index]~xArray,col="blue")
}
graphics.off()
}
# setwd() to the dir where the script have been stored
if (!require("rstudioapi"))
install.packages("rstudioapi")
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loading the functions
#source("sourceAll.R")
size = 100
replicationCount = getReplicationCountFromSampleSize(size)
fileName <- "productCol_lrv"
fileName <- timestampGenerator(fileName = fileName)
psi = 0.5
# psi = 0 # makes it iid
sigma = 1
mean = 0
cMatrix <- createCMatrix(size = size,
psi = psi,
sigma = sigma)
lrvProductColReplicated = cMatrix [1,] + 2 * cMatrix [2,]
xArray <- 1:(size-1)
NlrvProductColReplicatedHat <- 5
lrvProductColReplicatedHatArray <- matrix(NA, nrow = size - 1,ncol = NlrvProductColReplicatedHat)
subtitle <- paste("lag\n","size=replicationcount = ",size,"\npsi = ",psi,
", sigma = ", sigma, ", mean = ", mean)
for(index in 1:NlrvProductColReplicatedHat)
{
originalReplicated <- createOriginalMA1Replicated(replicationCount = replicationCount,
size = size,
psi = psi,
sigma = sigma)
productColReplicated <- createProductColReplicated(originalReplicated = originalReplicated)
lrvHat <- createLRVof3dArray(array3d = productColReplicated)
lrvProductColReplicatedHatArray[,index] <- lrvHat
df <- data.frame(lrvProductColReplicated,lrvProductColReplicatedHatArray)
max <- max(df, na.rm = FALSE)
min <- min(df, na.rm = FALSE)
saveJpg("productCol_lrv","./plots/")
plot(lrvProductColReplicated ~ xArray, type = "l",col = "red",ylim = c(min,max),xlab  = "")
title(main="ProductCol lrv & lrvHat",sub = subtitle)
lineArray <- c("ProductColLRV","ProductColLRVHat")
legend("topright",
title = "LRV",
lineArray,
fill = c("red","blue"))
for(index in 1:NlrvProductColReplicatedHat)
{
lines( lrvProductColReplicatedHatArray[,index]~xArray,col="blue")
}
graphics.off()
}
# setwd() to the dir where the script have been stored
if (!require("rstudioapi"))
install.packages("rstudioapi")
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loading the functions
#source("sourceAll.R")
size = 100
replicationCount = getReplicationCountFromSampleSize(size)
fileName <- "productCol_lrv"
fileName <- timestampGenerator(fileName = fileName)
psi = 0.5
# psi = 0 # makes it iid
sigma = 1
mean = 0
cMatrix <- createCMatrix(size = size,
psi = psi,
sigma = sigma)
lrvProductColReplicated = cMatrix [1,] + 2 * cMatrix [2,]
xArray <- 1:(size-1)
NlrvProductColReplicatedHat <- 5
lrvProductColReplicatedHatArray <- matrix(NA, nrow = size - 1,ncol = NlrvProductColReplicatedHat)
subtitle <- paste("lag\n","size=replicationcount = ",size,"\npsi = ",psi,
", sigma = ", sigma, ", mean = ", mean)
for(index in 1:NlrvProductColReplicatedHat)
{
originalReplicated <- createOriginalMA1Replicated(replicationCount = replicationCount,
size = size,
psi = psi,
sigma = sigma)
productColReplicated <- createProductColReplicated(originalReplicated = originalReplicated)
lrvHat <- createLRVof3dArray(array3d = productColReplicated)
lrvProductColReplicatedHatArray[,index] <- lrvHat
df <- data.frame(lrvProductColReplicated,lrvProductColReplicatedHatArray)
max <- max(df, na.rm = TRUE)
min <- min(df, na.rm = TRUE)
saveJpg("productCol_lrv","./plots/")
plot(lrvProductColReplicated ~ xArray, type = "l",col = "red",ylim = c(min,max),xlab  = "")
title(main="ProductCol lrv & lrvHat",sub = subtitle)
lineArray <- c("ProductColLRV","ProductColLRVHat")
legend("topright",
title = "LRV",
lineArray,
fill = c("red","blue"))
for(index in 1:NlrvProductColReplicatedHat)
{
lines( lrvProductColReplicatedHatArray[,index]~xArray,col="blue")
}
graphics.off()
}
# setwd() to the dir where the script have been stored
if (!require("rstudioapi"))
install.packages("rstudioapi")
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loading the functions
#source("sourceAll.R")
size = 100
replicationCount = getReplicationCountFromSampleSize(size)
fileName <- "productCol_lrv"
fileName <- timestampGenerator(fileName = fileName)
psi = 0.5
# psi = 0 # makes it iid
sigma = 1
mean = 0
cMatrix <- createCMatrix(size = size,
psi = psi,
sigma = sigma)
lrvProductColReplicated = cMatrix [1,] + 2 * cMatrix [2,]
xArray <- 1:(size-1)
NlrvProductColReplicatedHat <- 5
lrvProductColReplicatedHatArray <- matrix(NA, nrow = size - 1,ncol = NlrvProductColReplicatedHat)
subtitle <- paste("lag\n","size=replicationcount = ",size,"\npsi = ",psi,
", sigma = ", sigma, ", mean = ", mean)
for(index in 1:NlrvProductColReplicatedHat)
{
originalReplicated <- createOriginalMA1Replicated(replicationCount = replicationCount,
size = size,
psi = psi,
sigma = sigma)
productColReplicated <- createProductColReplicated(originalReplicated = originalReplicated)
lrvHat <- createLRVof3dArray(array3d = productColReplicated)
lrvProductColReplicatedHatArray[,index] <- lrvHat
df <- data.frame(lrvProductColReplicated,lrvProductColReplicatedHatArray)
max <- max(df, na.rm = TRUE)
min <- min(df, na.rm = TRUE)
saveJpg("productCol_lrv","./plots/")
plot(lrvProductColReplicated ~ xArray, type = "n",col = "red",ylim = c(min,max),xlab  = "")
title(main="ProductCol lrv & lrvHat",sub = subtitle)
lineArray <- c("ProductColLRV","ProductColLRVHat")
legend("topright",
title = "LRV",
lineArray,
fill = c("red","blue"))
for(index in 1:NlrvProductColReplicatedHat)
{
lines( lrvProductColReplicatedHatArray[,index]~xArray,col="blue")
}
lines(lrvProductColReplicated ~ xArray,col = "red")
graphics.off()
}
