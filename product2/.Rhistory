# Filling the entire first line with c02 value
cMatrix[1,] <- c02
# Filling the entire second line with c11 value
cMatrix[2,] <- c11
# Changing Cmatrix[1, 1] value to c00
cMatrix[1, 1] <- c00
# Changing Cmatrix[2, 1] value to c10
cMatrix[2, 1] <- c10
# Changing Cmatrix[1, 2] value to c01
cMatrix[1, 2] <- c01
cMatrix
}
#' @title createDHatMatrix
#'
#' @name
#'
#' @aliases
#'
#' @description
#'
#' @param
#'
#' @return
#'
#' @examples
#'
#' @export
createDHatMatrix <- function(betaArray,
size) {
# Eliminating all NA's
betaArrayWithoutNA <- apply(betaArray[ , -1], MARGIN = 2, na.exclude)
# Creating an empty list
dHatList <- vector("list", size - 1)
# Filling cHatList with ACF values
for (i in 1:(size - 1)) {
acfOfIthBetaArrayWithoutNA <- acf(betaArrayWithoutNA[[i]],
type = "covariance")
dHatList[[i]] <- as.vector(
unlist(
acfOfIthBetaArrayWithoutNA$acf))
}
# Building the final matrix,
# complementing the missing values with NA's
dHatMatrix <- array(0, dim = c(length(unlist(dHatList[[1]])),
size - 1))
#
for (i in 1:(size - 1)) {
difLength <- dim(dHatMatrix)[1] - length(unlist(dHatList[i]))
ifelse(difLength == 0,
dHatMatrix[, i] <- unlist(dHatList[i]),
dHatMatrix[, i] <- c(unlist(dHatList[i]),
rep(0, difLength)))
}
dHatMatrix <- cbind(0, dHatMatrix)
dHatMatrix
}
#' @title createDiffCMatrixVsCHatMatrix
#'
#' @name
#'
#' @aliases
#'
#' @description
#'
#' @param
#'
#' @return
#'
#' @examples
#'
#' @export
createDiffCMatrixVsCHatMatrix <- function(cMatrix,
cHatMatrix) {
matDim <- c(min(dim(cMatrix)[1], dim(cHatMatrix)[1]),
min(dim(cMatrix)[2], dim(cHatMatrix)[2]))
# diff_cMatrix_vs_cHatMatrix <- array(NA, dim = c(matDim[1], matDim[2]))
diffCMatrixVsCHatMatrix <<- cMatrix[1:matDim[1], 1:matDim[2]] -
cHatMatrix[1:matDim[1], 1:matDim[2]]
iCount = dim(diffCMatrixVsCHatMatrix)[2]
# Exporting plots of differences
for (i in 1:iCount) {
dir.create(file.path("./", "plots"), showWarnings = FALSE)
full.name = paste0("diff_cMatrix_vs_cHatMatrix_lag_", i - 1, ".jpeg")
plot.path <- file.path("./", "plots", full.name)
jpeg(plot.path)
# Need to be flattened to vectors
ithElement <- unlist(diffCMatrixVsCHatMatrix[, i])
barplot(
ithElement,
xlim = c(0, (length(ithElement) + 2)),
xlab = "Lag Count",
ylab = "C vs CHat difference",
axes = TRUE,
main = bquote(paste(
"Difference of C vs ", hat(C), " matrices, ",
"lag = ", .(i - 1)
))
)
graphics.off()
}
}
#' @title createDiffDMatrixVsDHatMatrix
#'
#' @name
#'
#' @aliases
#'
#' @description
#'
#' @param
#'
#' @return
#'
#' @examples
#'
#' @export
createDiffDMatrixVsDHatMatrix <- function(dMatrix,
dHatMatrix) {
matDim <- c(min(dim(dMatrix)[1], dim(dHatMatrix)[1]),
min(dim(dMatrix)[2], dim(dHatMatrix)[2])
)
dMatrixToCompare <- dMatrix[1:matDim[1], 1:matDim[2]]
dHatMatrixToCompare <- dHatMatrix[1:matDim[1], 1:matDim[2]]
diffDMatrixVsDHatMatrix <<- dMatrixToCompare - dHatMatrixToCompare
# # Exporting plots of differences
iCount = dim(diffDMatrixVsDHatMatrix)[2]
for (i in 1:iCount) {
dir.create(file.path("./", "plots"), showWarnings = FALSE)
full.name = paste0("diffDMatrixVsDHatMatrix_lag_", i - 1, ".jpeg")
plot.path <- file.path("./", "plots", full.name)
jpeg(plot.path)
# Need to be flattened to vectors
ithElement <- unlist(diffDMatrixVsDHatMatrix[, i])
barplot(
ithElement,
xlim = c(0, (length(ithElement) + 2)),
xlab = "Lag Count",
ylab = "D vs DHat difference",
axes = TRUE,
main = bquote(paste(
"Difference of D and ", hat(D), " matrices, ",
"lag = ", .(i - 1)
))
)
graphics.off()
}
}
#' @title createDMatrix
#'
#' @name
#'
#' @aliases
#'
#' @description
#'
#' @param
#'
#' @return
#'
#' @examples
#'
#' @export
createDMatrix <- function(size,
sigma,
psi) {
dMatrix <-  array(0, dim = c(size - 1, size - 1))
d01 = (1 + psi ^ 4 + 3 * psi ^ 2) / ((psi ^ 2 + 1) ^ 2)
d02 <- sigma ^ 4 * ((1 + psi ^ 2) ^ 2)
d11 <-  psi ^ 2 * (psi ^ 2 - 1) / ((1 + psi ^ 2) ^ 4)
d12 <- psi ^ 2 * sigma ^ 4
# Dmatrix[1, 3], Dmatrix[2, 3] values to d02, d12
# dMatrix[1, 2], dMatrix[2, 2], a.k.a. d_01, d_11
dMatrix[1, 2] <- d01
dMatrix[2, 2] <- d11
dMatrix[1, 3] <- d02
dMatrix[2, 3] <- d12
dMatrix <- dMatrix / (sigma ^ 4 * ((1 + psi ^ 2) ^ 2))
dMatrix [, 4:dim(dMatrix)[2]] = dMatrix [, 3]
dMatrix
}
#' @title createLRVof2dArray
#'
#' @name
#'
#' @aliases
#'
#' @description
#'
#' @param
#'
#' @return
#'
#' @examples
#'
#' @export
createLRVof2dArray <- function(array2d) {
# for each line we calculate average
# and take variance  of those averages
# multiply the result by a sqrt of a row count
# Issue of rows and columns
# Bars for each row
# Then variance for all the results
# corrected 1 to 2
# here we do not transpose because it was already transposed on 3d level
naCountInARowVector = rowSums(is.na(array2d))
naCountInARow = naCountInARowVector[1]
colCountNoNA = dim(array2d) [2] - naCountInARow
array2dNoNA <- array2d[, 1:colCountNoNA]
rowMeansArray <- rowMeans(array2dNoNA)
lrv <- colCountNoNA * var(rowMeansArray)
lrv
}
#' @title createLRVof3dArray
#'
#' @name
#'
#' @aliases
#'
#' @description
#'
#' @param
#'
#' @return
#'
#' @examples
#'
#' @export
createLRVof3dArray <- function(array3d) {
# array3d is a 3-D array of the following setup:
# array3d[rowCount, colCount, replicationCount]
# reference to one level down
colCount = dim (array3d) [2]
# subtracted 1 colCount-1 because it complained about dimensions
lrvArray = array (NA, dim = (colCount-1))
for (colIndex in 1:(colCount-1))
# lrvArray = array (NA, dim = (colCount))
# for (colIndex in 1:(colCount))
{
transposed2d <- t(array3d[ , colIndex, ])
lrvArray [colIndex] = createLRVof2dArray(transposed2d)
}
lrvArray
}
#' @title createOriginal
#'
#' @name
#'
#' @aliases
#'
#' @description
#'
#' @param
#'
#' @return
#'
#' @examples
#'
#' @export
createOriginal <- function(size = 10,
psi = 0.5,
sigma = 1) {
stats::arima.sim (n = size,
model = list(ma = c(psi)),
sd = sigma)
}
#' @title createOriginalMA1
#'
#' @name
#'
#' @aliases
#'
#' @description
#'
#' @param
#'
#' @return
#'
#' @examples
#'
#' @export
createOriginalMA1 <- function(size,
psi,
sigma) {
stats::arima.sim (n = size,
model = list(ma = c(psi)),
sd = sigma)
}
#' @title createOriginalMA1Replicated
#'
#' @name
#'
#' @aliases
#'
#' @description
#'
#' @param
#'
#' @return
#'
#' @examples
#'
#' @export
createOriginalMA1Replicated <- function(replicationCount = 10,
size = 10,
psi = 0.5,
sigma = 1) {
originalMA1Replicated <- array(NA, dim = c(replicationCount, size))
for (i in 1:replicationCount) {
originalMA1Replicated[i, ] <- createOriginalMA1(size, psi, sigma)
}
originalMA1Replicated
}
#' @title createProductCol
#'
#' @name
#'
#' @aliases
#'
#' @description
#'
#' @param
#'
#' @return
#'
#' @examples
#'
#' @export
createProductCol <- function(original) {
lengthOriginal <- length(original)
productCol  <- matrix(NA, nrow = lengthOriginal,
ncol = lengthOriginal)
# Filling the upper diagonal with product values
productCol [lengthOriginal, 1] = original[lengthOriginal] ^ 2
lag = 1
while ((lengthOriginal - lag) > 0) {
for (rowIndex in 1:(lengthOriginal - 1)) {
for (colIndex in 1:(lengthOriginal - lag + 1)) {
productCol[rowIndex, colIndex] <-
original[rowIndex] * original[colIndex + lag - 1]
}
lag = lag + 1
}
}
productCol <- as.data.frame(productCol)
colnames(productCol) <- as.character(0:(lengthOriginal - 1))
productCol
}
#' @title createProductColReplicated
#'
#' @name
#'
#' @aliases
#'
#' @description
#'
#' @param
#'
#' @return
#'
#' @examples
#'
#' @export
createProductColReplicated <- function(originalReplicated, size, replicationCount) {
prodColReplicated <- apply(X = originalReplicated,
MARGIN = 1,
FUN = createProductCol)
prodColReplicated <- array(as.numeric(unlist(prodColReplicated)),
dim=c(size, size, replicationCount))
}
#' @title drawCvsCHat
#
#' @name
#'
#' @aliases
#'
#' @description
#'
#' @param
#'
#' @return
#'
#' @examples
#'
#' @export
drawCvsCHat <-  function(cMatrix, cHatMatrix) {
iCount = min(dim(cMatrix)[2],
dim(cHatMatrix)[2])
for (i in 1:iCount) {
full.name = paste0("barplot_cHatMatrix_vs_cMatrix_lag_", i, ".jpeg")
plot.path <- file.path("./", "plots", full.name)
jpeg(plot.path)
tmpMin <- min(cHatMatrix[, i], cMatrix[, i])
tmpMax <- max(cHatMatrix[, i], cMatrix[, i])
tmpMatrix <- rbind(cHatMatrix[, i][1:iCount],
cMatrix[, i][1:iCount])
rownames(tmpMatrix) <- c("C Hat", "C")
barplot(tmpMatrix,
beside = T,
ylim = c(tmpMin - 1, tmpMax + 1),
xlim = c(0, iCount + 2),
col = c("dark grey", "black"),
legend = rownames(tmpMatrix),
main = bquote(paste(
"C matrix vs ", hat(C), " matrix, lag = ", .(i - 1))))
graphics.off()
}
}
#' @title drawDvsDHat
#
#' @name
#'
#' @aliases
#'
#' @description
#'
#' @param
#'
#' @return
#'
#' @examples
#'
#' @export
drawDvsDHat <-  function(dMatrix, dHatMatrix) {
iCount = min(dim(dMatrix)[2],
dim(dHatMatrix)[2])
for (i in 1:iCount) {
full.name = paste0("barplot_dMatrix_vs_dHatMatrix_lag_", i - 1, ".jpeg")
plot.path <- file.path("./", "plots", full.name)
jpeg(plot.path)
tmpMin <- min(dHatMatrix[, i], dMatrix[, i])
tmpMax <- max(dHatMatrix[, i], dMatrix[, i])
tmpMatrix <- rbind(dHatMatrix[, i][1:iCount],
dMatrix[, i][1:iCount])
rownames(tmpMatrix) <- c("D Hat", "D")
barplot(tmpMatrix,
beside = T,
ylim = c(tmpMin - 1, tmpMax + 1),
xlim = c(0, iCount + 2),
col = c("dark grey", "black"),
legend = rownames(tmpMatrix),
main = bquote(paste(
"D matrix vs ", hat(D), " matrix, lag = ", .(i - 1))))
graphics.off()
}
}
#' @title exportOriginal
#'
#' @name
#'
#' @aliases
#'
#' @description
#'
#' @param
#'
#' @return
#'
#' @examples
#'
#' @export
exportOriginal <- function(original) {
dir.create(file.path("./", "export"), showWarnings = FALSE)
# Building the CSV file name (as long as size, psi & sigma are present
# in the global env-t)
full.name = paste0("original_size_", size,
"_psi_", psi,
"_sigma_", sigma,
".csv")
csv.path <- file.path("./", "export", full.name)
write.csv(x = original, file = csv.path)
}
#' @title saveProductCol
#'
#' @name
#'
#' @aliases
#'
#' @description
#'
#' @param
#'
#' @return
#'
#' @examples
#'
#' @export
saveProductCol <- function(dataframe) {
nameOfFile <-
dir.create(file.path("./", "export"), showWarnings = FALSE)
write.csv(dataframe, file = "export/productColExported.csv")
}
devtools::load_all(".")
library(product2)
devtools::document()
?createOriginalMA1()
?createOriginalMA1Replicated()
devtools::load_all(".")
devtools::document()
?product2::createBetaArray()
product2::createDiffCMatrixVsCHatMatrix()
?product2::createDiffCMatrixVsCHatMatrix()
devtools::document()
?product2::createDiffCMatrixVsCHatMatrix()
devtools::document()
?product2::createDiffCMatrixVsCHatMatrix()
library(product2)
library(product2)
devtools::document()
?product2::createDiffCMatrixVsCHatMatrix()
?product2::createBetaArray()
?product2::createBetaArrayReplicated
?product2::createBetaArrayReplicated()
