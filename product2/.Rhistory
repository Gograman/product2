cHatMatrix = cHatMatrix)
createDiffDMatrixVsDHatMatrix(dMatrix = dMatrix,
dHatMatrix = dHatMatrix)
drawCvsCHat(cMatrix = cMatrix, cHatMatrix = cHatMatrix)
drawDvsDHat(dMatrix = dMatrix, dHatMatrix = dHatMatrix)
drawProductCol(productCol = productCol,
size = size,
mean = mean,
sigma = sigma,
lagCount = lagCount
)
# setwd() to the dir where the script have been stored
if (!require("rstudioapi"))
install.packages("rstudioapi")
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loading the functions
# source("sourceAll.R") # legacy, before it was a package
replicationCount = 3
size = 100
psi = .5
# psi = 0 # makes it iid
sigma = 1
mean = 0
# for iid
# gamma0 = sigma ^ 2
# rho = rep(0, length = size)
# for MA1
gamma0 = sigma ^ 2 * (1 + psi ^ 2)
rho = rep(0, length = size)
rho [1] = psi / (1 + psi ^ 2)
gamma1 = psi * sigma^2
lrvOriginal = gamma0 + 2 * gamma1
lagCount = 10
lagCount = min(lagCount, size)
# original <- createOriginalMA1(size = size,
#                               psi = psi,
#                               sigma = sigma)
originalReplicated <- createOriginalMA1Replicated(replicationCount = replicationCount,
size = size,
psi = psi,
sigma = sigma)
original = originalReplicated [1, ]
# create scalar lrvOriginal out of originalReplicated
lrvOriginalHat <- createLRVof2dArray(array2d = originalReplicated)
lrvOriginalHat
lrvOriginal
exportOriginal(original)
exportOriginal(originalReplicated)
cMatrix <- createCMatrix(size = size,
psi = psi,
sigma = sigma)
lrvProductColReplicated = cMatrix [1,] + 2 * cMatrix [2,]
lrvProductColReplicated
dMatrix <- createDMatrix(size = size,
psi = psi,
sigma = sigma)
lrvBetaArrayReplicated = dMatrix [1,] + 2 * dMatrix [2,]
lrvBetaArrayReplicated
productCol <- createProductCol(original = original)
dim(productCol)
productColReplicated <- createProductColReplicated(originalReplicated = originalReplicated,
size = size,
replicationCount = replicationCount)
productColReplicated
# saveProductCol(dataframe = productCol)
# saveProductCol(dataframe = as.data.frame(productColReplicated))
drawProductCol(productCol = productCol,
size = size,
mean = mean,
sigma = sigma,
lagCount = lagCount,
darkestColor = "dark green",
lightestColor = "white")
# the last NA needs to be investigated
# var is applicable when the length is 2 and more
# may be need to cut the last one
lrvProductColReplicatedHat <- createLRVof3dArray(array3d = productColReplicated)
lrvProductColReplicatedHat
lrvProductColReplicated
# compare
maxLRV = max (c(lrvProductColReplicated, lrvProductColReplicatedHat), na.rm = T)
minLRV = min (lrvProductColReplicated, lrvProductColReplicatedHat)
jpeg("./plots/alpha_lrv.jpeg")
plot (lrvProductColReplicated, pch = 17, col = "green",
ylim = c(minLRV - 1, maxLRV + 1))
points (lrvProductColReplicatedHat, pch = 17, col = "red")
graphics.off()
betaArray <- createBetaArray(original = original, rho = rho)
betaArrayReplicated <- createBetaArrayReplicated(originalReplicated = originalReplicated,
size = size,
replicationCount = replicationCount,
rho = rho)
lrvBetaArrayReplicatedHat <- createLRVof3dArray(array3d = betaArrayReplicated)
lrvBetaArrayReplicatedHat
lrvBetaArrayReplicated
cHatMatrix <- createCHatMatrix(productCol, size)
dHatMatrix <- createDHatMatrix(betaArray, size)
dim(cHatMatrix)
createDiffCMatrixVsCHatMatrix(cMatrix = cMatrix,
cHatMatrix = cHatMatrix)
createDiffDMatrixVsDHatMatrix(dMatrix = dMatrix,
dHatMatrix = dHatMatrix)
drawCvsCHat(cMatrix = cMatrix, cHatMatrix = cHatMatrix)
drawDvsDHat(dMatrix = dMatrix, dHatMatrix = dHatMatrix)
drawProductCol(productCol = productCol,
size = size,
mean = mean,
sigma = sigma,
lagCount = lagCount
)
devtools::load_all(".")
myCMatrix = createCMatrix(size = 10,
sigma = 1,
psi = 0.5)
dimOfCMatrix <- dim(myCMatrix)
dimShouldBe <- c(9, 9)
expect_that(dimOfCMatrix, equals(dimShouldBe))
library(testthat)
myCMatrix = createCMatrix(size = 10,
sigma = 1,
psi = 0.5)
dimOfCMatrix <- dim(myCMatrix)
dimShouldBe <- c(9, 9)
expect_that(dimOfCMatrix, equals(dimShouldBe))
expect_that(dimOfCMatrix, equals(dimShouldBe))
x<-expect_that(dimOfCMatrix, equals(dimShouldBe))
View(myCMatrix)
dimShouldBe <- c(10, 10)
expect_that(dimOfCMatrix, equals(dimShouldBe))
cat("test_xx_createCMatrix")
# Testing createCMatrix function
# for dimensions of result
createCMatrixFunction = function() {
cat("test_xx_createCMatrix")
myCMatrix = createCMatrix(size = 10,
sigma = 1,
psi = 0.5)
dimOfCMatrix <- dim(myCMatrix)
dimShouldBe <- c(9, 9)
expect_that(dimOfCMatrix, equals(dimShouldBe))
}
test_that(desc = "Testing createCMatrix for dimensions",
code = myTestFunction())
# Testing createCMatrix function
# for dimensions of result
createCMatrixFunction = function() {
cat("test_xx_createCMatrix")
myCMatrix = createCMatrix(size = 10,
sigma = 1,
psi = 0.5)
dimOfCMatrix <- dim(myCMatrix)
dimShouldBe <- c(9, 9)
expect_that(dimOfCMatrix, equals(dimShouldBe))
}
test_that(desc = "Testing createCMatrix for dimensions",
code = createCMatrixFunction())
duration <- system.time(
myCMatrix = createCMatrix(size = 10,
sigma = 1,
psi = 0.5)
)
duration <- system.time(
myCMatrix = createCMatrix(size = 10,
sigma = 1,
psi = 0.5)
)
start <- Sys.time()
start <- Sys.time()
myCMatrix = createCMatrix(size = 10,
sigma = 1,
psi = 0.5)
end <- Sys.time()
duration <- end - start
Start <- Sys.time()
myCMatrix = createCMatrix(size = 10,
sigma = 1,
psi = 0.5)
End <- Sys.time()
cat("test_xx_createCMatrix")
Start <- Sys.time()
myCMatrix = createCMatrix(size = 10,
sigma = 1,
psi = 0.5)
End <- Sys.time()
duration <- End - Start
duration
cat("\n Testing \'tests_xx_createCMatrix\' \n")
Start <- Sys.time()
myCMatrix = createCMatrix(size = 10,
sigma = 1,
psi = 0.5)
End <- Sys.time()
duration <- End - Start
dimOfCMatrix <- dim(myCMatrix)
dimShouldBe <- c(9, 9)
expect_that(dimOfCMatrix, equals(dimShouldBe))
cat("\nDuration",duration,"\n")
cat("\nDuration",duration,"\n")
cat("\ncMatrix",myCMatrix,"n")
size <- 10
sigma <- 1
psi <- 0.5
myCMatrix = createCMatrix(size = size,
sigma = sigma,
psi = psi)
End <- Sys.time()
duration <- End - Start
dimOfCMatrix <- dim(myCMatrix)
dimShouldBe <- c(9, 9)
expect_that(dimOfCMatrix, equals(dimShouldBe))
cat("\nDuration",duration,"\n")
cat("\ncMatrix",myCMatrix,"n")
cat("=====================")
cat("\nTest parameters :","\n")
# Testing createCMatrix function
# for dimensions of result
createCMatrixFunction = function() {
cat("\n Testing \'tests_xx_createCMatrix\' \n")
Start <- Sys.time()
size <- 10
sigma <- 1
psi <- 0.5
myCMatrix = createCMatrix(size = size,
sigma = sigma,
psi = psi)
End <- Sys.time()
duration <- End - Start
dimOfCMatrix <- dim(myCMatrix)
dimShouldBe <- c(9, 9)
expect_that(dimOfCMatrix, equals(dimShouldBe))
cat("\nDuration = ",duration,"\n")
cat("\ncMatrix = ",myCMatrix,"n")
cat("=====================")
cat("\nTest parameters :","\n")
cat("\nsize = ",size,"n")
cat("\psi = ",psi,"n")
cat("\sigma = ",sigma,"n")
}
test_that(desc = "Testing createCMatrix for dimensions",
code = createCMatrixFunction())
createCMatrixFunction = function() {
cat("\n Testing \'tests_xx_createCMatrix\' \n")
Start <- Sys.time()
size <- 10
sigma <- 1
psi <- 0.5
myCMatrix = createCMatrix(size = size,
sigma = sigma,
psi = psi)
End <- Sys.time()
duration <- End - Start
dimOfCMatrix <- dim(myCMatrix)
dimShouldBe <- c(9, 9)
expect_that(dimOfCMatrix, equals(dimShouldBe))
cat("\nDuration = ",duration,"\n")
cat("\ncMatrix = ",myCMatrix,"n")
cat("=====================")
cat("\nTest parameters :","\n")
cat("\nsize = ",size,"n")
cat("\psi = ",psi,"n")
cat("\sigma = ",sigma,"n")
}
# Testing createCMatrix function
# for dimensions of result
createCMatrixFunction = function() {
cat("\n Testing \'tests_xx_createCMatrix\' \n")
Start <- Sys.time()
size <- 10
sigma <- 1
psi <- 0.5
myCMatrix = createCMatrix(size = size,
sigma = sigma,
psi = psi)
End <- Sys.time()
duration <- End - Start
dimOfCMatrix <- dim(myCMatrix)
dimShouldBe <- c(9, 9)
expect_that(dimOfCMatrix, equals(dimShouldBe))
cat("\nDuration = ",duration,"\n")
cat("\ncMatrix = ",myCMatrix,"n")
cat("=====================")
cat("\nTest parameters :","\n")
cat("\nsize = ",size,"\n")
cat("\psi = ",psi,"\n")
cat("\sigma = ",sigma,"\n")
}
# Testing createCMatrix function
# for dimensions of result
createCMatrixFunction = function() {
cat("\n Testing \'tests_xx_createCMatrix\' \n")
Start <- Sys.time()
size <- 10
sigma <- 1
psi <- 0.5
myCMatrix = createCMatrix(size = size,
sigma = sigma,
psi = psi)
End <- Sys.time()
duration <- End - Start
dimOfCMatrix <- dim(myCMatrix)
dimShouldBe <- c(9, 9)
expect_that(dimOfCMatrix, equals(dimShouldBe))
cat("\nDuration = ",duration,"\n")
cat("\ncMatrix = ",myCMatrix,"n")
cat("=====================")
cat("\nTest parameters :","\n")
cat("\nsize = ",size,"\n")
cat("\npsi = ",psi,"\n")
cat("\nsigma = ",sigma,"\n")
}
# Testing createCMatrix function
# for dimensions of result
createCMatrixFunction = function() {
cat("\n Testing \'tests_xx_createCMatrix\' \n")
Start <- Sys.time()
size <- 10
sigma <- 1
psi <- 0.5
myCMatrix = createCMatrix(size = size,
sigma = sigma,
psi = psi)
End <- Sys.time()
duration <- End - Start
dimOfCMatrix <- dim(myCMatrix)
dimShouldBe <- c(9, 9)
expect_that(dimOfCMatrix, equals(dimShouldBe))
cat("\nDuration = ",duration,"\n")
cat("\ncMatrix = ",myCMatrix,"n")
cat("=====================")
cat("\nTest parameters :","\n")
cat("\nsize = ",size,"\n")
cat("\npsi = ",psi,"\n")
cat("\nsigma = ",sigma,"\n")
}
test_that(desc = "Testing createCMatrix for dimensions",
code = createCMatrixFunction())
# Testing createCMatrix function
# for dimensions of result
createCMatrixFunction = function() {
cat("\n Testing \'tests_xx_createCMatrix\' \n")
Start <- Sys.time()
size <- 10
sigma <- 1
psi <- 0.5
myCMatrix = createCMatrix(size = size,
sigma = sigma,
psi = psi)
End <- Sys.time()
duration <- End - Start
dimOfCMatrix <- dim(myCMatrix)
dimShouldBe <- c(9, 9)
expect_that(dimOfCMatrix, equals(dimShouldBe))
cat("\nDuration = ",duration,"\n")
cat("\ncMatrix = ",myCMatrix,"n")
cat("=====================")
cat("\nTest parameters :","\n")
cat("\nsize = ",size,"\n")
cat("\npsi = ",psi,"\n")
cat("\nsigma = ",sigma,"\n")
}
test_that(desc = "Testing createCMatrix for dimensions",
code = {
createCMatrixFunction()
cat(" End of test createCMatrix","\n")
cat("=====================")
})
myDMatrix <- createDMatrix(size = 10,
sigma = 1,
psi = 0.5)
firstColOfDMatrix <- myDMatrix[, 1]
aShouldBeArray <- rep(0, 9)
View(myDMatrix)
aShouldBeArray <- rep(0, 9)
expect_that(firstColOfDMatrix, equals(aShouldBeArray))
# Testing createDMatrix function
# for dimensions of result - dMatrix
createDMatrixFuntion = function() {
cat("\n Testing \'tests_xx_FirstColOfZeros\' \n")
mySize <- 10
mySigma <- 1
myPsi <- 0.5
Start <- Sys.time()
myDMatrix <- createDMatrix(size = mySize,
sigma = mySigma,
psi = myPsi)
End <- Sys.time()
duration <- End - Start
dimOfDMatrix <- dim(myDMatrix)
dimShouldBe <- c(9, 9)
expect_that(dimOfDMatrix, equals(dimShouldBe))
cat("\nDuration = ",duration,"\n")
cat("\nfirst colum of Dmatrix = ",firstColOfDMatrix,"n")
cat("=====================")
cat("\nTest parameters :","\n")
cat("\nsize = ",mySize,"\n")
cat("\npsi = ",myPsi,"\n")
cat("\nsigma = ",mySigma,"\n")
}
test_that(desc = "Testing createDMatrix for dimensions",
code = {
createDMatrixFuntion()
cat(" End of test createDMatrixFuntion","\n")
cat("=====================")
})
# Testing createDMatrix function
# for dimensions of result - dMatrix
createDMatrixFuntion = function() {
cat("\n Testing \'tests_xx_FirstColOfZeros\' \n")
mySize <- 10
mySigma <- 1
myPsi <- 0.5
Start <- Sys.time()
myDMatrix <- createDMatrix(size = mySize,
sigma = mySigma,
psi = myPsi)
End <- Sys.time()
duration <- End - Start
dimOfDMatrix <- dim(myDMatrix)
dimShouldBe <- c(9, 9)
expect_that(dimOfDMatrix, equals(dimShouldBe))
cat("\nDuration = ",duration,"\n")
cat("\nDmatrix = ",myDMatrix,"n")
cat("=====================")
cat("\nTest parameters :","\n")
cat("\nsize = ",mySize,"\n")
cat("\npsi = ",myPsi,"\n")
cat("\nsigma = ",mySigma,"\n")
}
test_that(desc = "Testing createDMatrix for dimensions",
code = {
createDMatrixFuntion()
cat(" End of test createDMatrixFuntion","\n")
cat("=====================")
})
# Testing createCMatrix function
# for dimensions of result
myTestFunction = function() {
cat("\n Testing \'tests_01_createCMatrix\' \n")
mySize <- 10
mySigma <- 1
myPsi <- 0.5
Start <- Sys.time()
myCMatrix = createCMatrix(size = mySize,
sigma = mySigma,
psi = myPsi)
dimOfCMatrix <- dim(myCMatrix)
dimShouldBe <- c(9, 9)
expect_that(dimOfCMatrix, equals(dimShouldBe))
cat("\nDuration = ",duration,"\n")
cat("\nCmatrix = ",myCMatrix,"n")
cat("=====================")
cat("\nTest parameters :","\n")
cat("\nsize = ",mySize,"\n")
cat("\npsi = ",myPsi,"\n")
cat("\nsigma = ",mySigma,"\n")
}
test_that(desc = "Testing createCMatrix for dimensions",
code = {
myTestFunction()
cat(" End of test createCMatrix","\n")
cat("=====================")
})
# Testing createCMatrix function
# for dimensions of result
myTestFunction = function() {
cat("\n Testing \'tests_01_createCMatrix\' \n")
mySize <- 10
mySigma <- 1
myPsi <- 0.5
Start <- Sys.time()
myCMatrix = createCMatrix(size = mySize,
sigma = mySigma,
psi = myPsi)
End <- Sys.time()
duration <- End - Start
dimOfCMatrix <- dim(myCMatrix)
dimShouldBe <- c(9, 9)
expect_that(dimOfCMatrix, equals(dimShouldBe))
cat("\nDuration = ",duration,"\n")
cat("\nCmatrix = ",myCMatrix,"n")
cat("=====================")
cat("\nTest parameters :","\n")
cat("\nsize = ",mySize,"\n")
cat("\npsi = ",myPsi,"\n")
cat("\nsigma = ",mySigma,"\n")
}
test_that(desc = "Testing createCMatrix for dimensions",
code = {
myTestFunction()
cat(" End of test createCMatrix","\n")
cat("=====================")
})
?arima.sim
cat("\n Testing \'tests_04_createOriginalMA1\' \n")
mySize <- 10
mySigma <- 1
myPsi <- 0.5
Start <- Sys.time()
myOriginalMa1 <- createOriginalMA1(size = mySize,
psi = myPsi,
sigma = mySigma)
End <- Sys.time()
duration <- End - Start
expect_that(length(myOriginalMa1), equals(10))
cat("\nDuration = ",duration,"\n")
cat("\nOriginalMa1 = ",myOriginalMa1,"n")
cat("=====================")
cat("\nTest parameters :","\n")
cat("\nsize = ",mySize,"\n")
cat("\npsi = ",myPsi,"\n")
cat("\nsigma = ",mySigma,"\n")
