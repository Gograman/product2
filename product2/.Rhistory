yMax <- max(lrvOriginalHatArray, na.rm = TRUE)
yMin <- min(lrvOriginalHatArray, na.rm = TRUE)
saveJpg("origin_lrv_size","./plots/",timeStamp = FALSE)
plot(lrvOriginalArray~sizeArray,type="l",ylim = c(yMin-0.01,yMax+0.01),col="blue",xlab="",
ylab = "lrv and LRVHat")
points(lrvOriginalHatArray~sizeArray,pch=20)
title("Original lrv and lrvHat",subtitle)
graphics.off()
}
yMax <- max(lrvOriginalHatArray)
yMin <- min(lrvOriginalHatArray)
saveJpg("origin_lrv_size","./plots/")
plot(lrvOriginalArray~sizeArray,type="l",ylim = c(yMin-0.01,yMax+0.01),col="blue",xlab="",
ylab = "lrv and LRVHat")
points(lrvOriginalHatArray~sizeArray,pch=20)
title("Original lrv and lrvHat",subtitle)
graphics.off()
install.packages("benchmark")
devtools::load_all(".")
original <- createOriginalMA1(size = size,
psi = psi,
sigma = sigma)
<<<<<<< HEAD
lrvProductColReplicated = cMatrix [1,] + 2 * cMatrix [2,]
xArray <- 1:(size-1)
NlrvProductColReplicatedHat <- 5
lrvProductColReplicatedHatArray <- matrix(0, nrow = size - 1,ncol = NlrvProductColReplicatedHat)
for(index in 1:NlrvProductColReplicatedHat)
{
originalReplicated <- createOriginalMA1Replicated(replicationCount = replicationCount,
size = size,
psi = psi,
sigma = sigma)
productColReplicated <- createProductColReplicated(originalReplicated = originalReplicated,
size = size,
replicationCount = replicationCount)
lrvHat <- createLRVof3dArray(array3d = productColReplicated)
fileName <- "productCol_lrvHatTemp"
fileName <- paste(fileName,index,sep = "_")
saveJpg(fileName,"./plots/")
plot(lrvHat~xArray,type = "l", col = "blue",xlab = "lag")
lines(lrvProductColReplicated~xArray,col = "red")
title(main = "ProductColLrvHat")
graphics.off()
lrvProductColReplicatedHatArray[,index] <- lrvHat
}
df <- data.frame(lrvProductColReplicated,lrvProductColReplicatedHatArray)
max <- max(df)
min <- min(df)
saveJpg("productCol_lrv","./plots/")
plot(lrvProductColReplicated ~ xArray, type = "l",col = "red",ylim = c(min,max),xlab  = "lag")
title(main="ProductCol lrv & lrvHat")
lineArray <- c("ProductColLRV","ProductColLRVHat")
legend("topright",
title = "LRV",
lineArray,
fill = c("red","blue"))
for(index in 1:NlrvProductColReplicatedHat)
{
lines( lrvProductColReplicatedHatArray[,index]~xArray,col="blue")
}
graphics.off()
# setwd() to the dir where the script have been stored
if (!require("rstudioapi"))
install.packages("rstudioapi")
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loading the functions
#source("sourceAll.R")
size = 100
replicationCount = getReplicationCountFromSampleSize(size)
psi = 0
# psi = 0 # makes it iid
sigma = 1
mean = 0
cMatrix <- createCMatrix(size = size,
psi = psi,
sigma = sigma)
lrvProductColReplicated = cMatrix [1,] + 2 * cMatrix [2,]
xArray <- 1:(size-1)
NlrvProductColReplicatedHat <- 5
lrvProductColReplicatedHatArray <- matrix(0, nrow = size - 1,ncol = NlrvProductColReplicatedHat)
for(index in 1:NlrvProductColReplicatedHat)
{
originalReplicated <- createOriginalMA1Replicated(replicationCount = replicationCount,
size = size,
psi = psi,
sigma = sigma)
productColReplicated <- createProductColReplicated(originalReplicated = originalReplicated,
size = size,
replicationCount = replicationCount)
lrvHat <- createLRVof3dArray(array3d = productColReplicated)
fileName <- "productCol_lrvHatTemp"
fileName <- paste(fileName,index,sep = "_")
saveJpg(fileName,"./plots/")
plot(lrvHat~xArray,type = "l", col = "blue",xlab = "lag")
lines(lrvProductColReplicated~xArray,col = "red")
title(main = "ProductColLrvHat")
graphics.off()
lrvProductColReplicatedHatArray[,index] <- lrvHat
}
df <- data.frame(lrvProductColReplicated,lrvProductColReplicatedHatArray)
max <- max(df)
min <- min(df)
saveJpg("productCol_lrv","./plots/")
plot(lrvProductColReplicated ~ xArray, type = "l",col = "red",ylim = c(min,max),xlab  = "lag")
title(main="ProductCol lrv & lrvHat")
lineArray <- c("ProductColLRV","ProductColLRVHat")
legend("topright",
title = "LRV",
lineArray,
fill = c("red","blue"))
for(index in 1:NlrvProductColReplicatedHat)
{
lines( lrvProductColReplicatedHatArray[,index]~xArray,col="blue")
}
graphics.off()
# setwd() to the dir where the script have been stored
if (!require("rstudioapi"))
install.packages("rstudioapi")
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loading the functions
#source("sourceAll.R")
size = 100
replicationCount = getReplicationCountFromSampleSize(size)
psi = 0
# psi = 0 # makes it iid
sigma = 1
mean = 0
cMatrix <- createCMatrix(size = size,
psi = psi,
sigma = sigma)
lrvProductColReplicated = cMatrix [1,] + 2 * cMatrix [2,]
xArray <- 1:(size-1)
NlrvProductColReplicatedHat <- 5
lrvProductColReplicatedHatArray <- matrix(0, nrow = size - 1,ncol = NlrvProductColReplicatedHat)
for(index in 1:NlrvProductColReplicatedHat)
{
originalReplicated <- createOriginalMA1Replicated(replicationCount = replicationCount,
size = size,
psi = psi,
sigma = sigma)
productColReplicated <- createProductColReplicated(originalReplicated = originalReplicated,
size = size,
replicationCount = replicationCount)
lrvHat <- createLRVof3dArray(array3d = productColReplicated)
fileName <- "productCol_lrvHatTemp"
fileName <- paste(fileName,index,sep = "_")
saveJpg(fileName,"./plots/")
plot(lrvHat~xArray,type = "l", col = "blue",xlab = "lag")
lines(lrvProductColReplicated~xArray,col = "red")
title(main = "ProductColLrvHat")
graphics.off()
lrvProductColReplicatedHatArray[,index] <- lrvHat
}
df <- data.frame(lrvProductColReplicated,lrvProductColReplicatedHatArray)
max <- max(df)
min <- min(df)
saveJpg("productCol_lrv","./plots/")
plot(lrvProductColReplicated ~ xArray, type = "l",col = "red",ylim = c(min,max),xlab  = "lag")
title(main="ProductCol lrv & lrvHat")
lineArray <- c("ProductColLRV","ProductColLRVHat")
legend("topright",
title = "LRV",
lineArray,
fill = c("red","blue"))
for(index in 1:NlrvProductColReplicatedHat)
{
lines( lrvProductColReplicatedHatArray[,index]~xArray,col="blue")
}
graphics.off()
exp()
?exp
exp(-4)
4^6
(exp(-4)*4^5)/factorial(5)
?log1p
log(0.05)
(exp(-2)*2^3)/factorial(3)
(exp(-2)*2^4)/factorial(4)
1- exp(-1)
?print
print(c)
x<-c
x<-2
print(x)
if (!require("rstudioapi"))
install.packages("rstudioapi")
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
sizeArray <- seq(10,2000,by = 100)
psi = .5
sigma = 1
gamma0 = sigma ^ 2 * (1 + psi ^ 2)
gamma1 = psi * sigma^2
lrvOriginal = gamma0 + 2 * gamma1
subtitle <- paste("replicationCount = size","\npsi = ",psi,", sigma = ",sigma)
lrvOriginalArray<-rep(lrvOriginal,length(sizeArray))
lrvOriginalHatArray <- rep(NA,length(sizeArray))
for(index in 1:length(sizeArray))
{
replicationCount <- getReplicationCountFromSampleSize(sizeArray[index])
originalReplicated <- createOriginalMA1Replicated(replicationCount = replicationCount,
size = sizeArray[index],
psi = psi,
sigma = sigma)
lrvOriginalHatArray[index] <- createLRVof2dArray(array2d = originalReplicated)
yMax <- max(lrvOriginalHatArray, na.rm = TRUE)
yMin <- min(lrvOriginalHatArray, na.rm = TRUE)
saveJpg("origin_lrv_size","./plots/",timeStamp = FALSE)
plot(lrvOriginalArray~sizeArray,type="l",ylim = c(yMin-0.01,yMax+0.01),col="blue",xlab="",
ylab = "lrv and LRVHat")
points(lrvOriginalHatArray~sizeArray,pch=20)
title("Original lrv and lrvHat",subtitle)
graphics.off()
}
yMax <- max(lrvOriginalHatArray)
yMin <- min(lrvOriginalHatArray)
saveJpg("origin_lrv_size","./plots/")
plot(lrvOriginalArray~sizeArray,type="l",ylim = c(yMin-0.01,yMax+0.01),col="blue",xlab="",
ylab = "lrv and LRVHat")
points(lrvOriginalHatArray~sizeArray,pch=20)
title("Original lrv and lrvHat",subtitle)
graphics.off()
devtools::load_all("C:/Users/Boris/OneDrive/text/toronto_u/research/zhou/r/product2/product2")
if (!require("rstudioapi"))
install.packages("rstudioapi")
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
sizeArray <- seq(10,2000,by = 100)
psi = .5
sigma = 1
gamma0 = sigma ^ 2 * (1 + psi ^ 2)
gamma1 = psi * sigma^2
lrvOriginal = gamma0 + 2 * gamma1
subtitle <- paste("replicationCount = size","\npsi = ",psi,", sigma = ",sigma)
lrvOriginalArray<-rep(lrvOriginal,length(sizeArray))
lrvOriginalHatArray <- rep(NA,length(sizeArray))
for(index in 1:length(sizeArray))
{
replicationCount <- getReplicationCountFromSampleSize(sizeArray[index])
originalReplicated <- createOriginalMA1Replicated(replicationCount = replicationCount,
size = sizeArray[index],
psi = psi,
sigma = sigma)
lrvOriginalHatArray[index] <- createLRVof2dArray(array2d = originalReplicated)
yMax <- max(lrvOriginalHatArray, na.rm = TRUE)
yMin <- min(lrvOriginalHatArray, na.rm = TRUE)
saveJpg("origin_lrv_size","./plots/",timeStamp = FALSE)
plot(lrvOriginalArray~sizeArray,type="l",ylim = c(yMin-0.01,yMax+0.01),col="blue",xlab="",
ylab = "lrv and LRVHat")
points(lrvOriginalHatArray~sizeArray,pch=20)
title("Original lrv and lrvHat",subtitle)
graphics.off()
}
yMax <- max(lrvOriginalHatArray)
yMin <- min(lrvOriginalHatArray)
saveJpg("origin_lrv_size","./plots/")
plot(lrvOriginalArray~sizeArray,type="l",ylim = c(yMin-0.01,yMax+0.01),col="blue",xlab="",
ylab = "lrv and LRVHat")
points(lrvOriginalHatArray~sizeArray,pch=20)
title("Original lrv and lrvHat",subtitle)
graphics.off()
if (!require("rstudioapi"))
install.packages("rstudioapi")
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
sizeArray <- seq(10,5000,by = 100)
psi = .5
sigma = 1
gamma0 = sigma ^ 2 * (1 + psi ^ 2)
gamma1 = psi * sigma^2
lrvOriginal = gamma0 + 2 * gamma1
subtitle <- paste("replicationCount = size","\npsi = ",psi,", sigma = ",sigma)
lrvOriginalArray<-rep(lrvOriginal,length(sizeArray))
lrvOriginalHatArray <- rep(NA,length(sizeArray))
for(index in 1:length(sizeArray))
{
replicationCount <- getReplicationCountFromSampleSize(sizeArray[index])
originalReplicated <- createOriginalMA1Replicated(replicationCount = replicationCount,
size = sizeArray[index],
psi = psi,
sigma = sigma)
lrvOriginalHatArray[index] <- createLRVof2dArray(array2d = originalReplicated)
yMax <- max(lrvOriginalHatArray, na.rm = TRUE)
yMin <- min(lrvOriginalHatArray, na.rm = TRUE)
saveJpg("origin_lrv_size","./plots/",timeStamp = FALSE)
plot(lrvOriginalArray~sizeArray,type="l",ylim = c(yMin-0.01,yMax+0.01),col="blue",xlab="",
ylab = "lrv and LRVHat")
points(lrvOriginalHatArray~sizeArray,pch=20)
title("Original lrv and lrvHat",subtitle)
graphics.off()
}
yMax <- max(lrvOriginalHatArray)
yMin <- min(lrvOriginalHatArray)
saveJpg("origin_lrv_size","./plots/")
plot(lrvOriginalArray~sizeArray,type="l",ylim = c(yMin-0.01,yMax+0.01),col="blue",xlab="",
ylab = "lrv and LRVHat")
points(lrvOriginalHatArray~sizeArray,pch=20)
title("Original lrv and lrvHat",subtitle)
graphics.off()
devtools::load_all("C:/Users/Boris/OneDrive/text/toronto_u/research/zhou/r/product2/product2")
if (!require("rstudioapi"))
install.packages("rstudioapi")
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
size = 10
replicationCount = getReplicationCountFromSampleSize(size)
psi = 0.5
# psi = 0 # makes it iid
sigma = 1
mean = 0
gamma0 = sigma ^ 2 * (1 + psi ^ 2)
rho = rep(0, length = size-1)
rho [1] = psi / (1 + psi ^ 2)
dMatrix <- createDMatrix(size = size,
psi = psi,
sigma = sigma)
lrvBetaArrayReplicated = dMatrix [1,] + 2 * dMatrix [2,]
originalReplicated <- createOriginalMA1Replicated(replicationCount = replicationCount,
size = size,
psi = psi,
sigma = sigma)
betaArrayReplicated <- createBetaArrayReplicated(originalReplicated = originalReplicated,
size = size,
replicationCount = replicationCount,
rho = rho)
traceback()
if (!require("rstudioapi"))
install.packages("rstudioapi")
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
size = 10
replicationCount = getReplicationCountFromSampleSize(size)
psi = 0.5
# psi = 0 # makes it iid
sigma = 1
mean = 0
gamma0 = sigma ^ 2 * (1 + psi ^ 2)
rho = rep(0, length = size-1)
rho [1] = psi / (1 + psi ^ 2)
dMatrix <- createDMatrix(size = size,
psi = psi,
sigma = sigma)
lrvBetaArrayReplicated = dMatrix [1,] + 2 * dMatrix [2,]
muOriginal <- createOriginalMA1(                                                  size = size,
psi = psi,
sigma = sigma)
myBetaArray <- createBetaArray(original = myOriginal,
rho = rho,
gamma0 = gamma0)
gamma0 = sigma ^ 2 * (1 + psi ^ 2)
myOriginal <- createOriginalMA1(size = size,
psi = psi,
sigma = sigma)
myBetaArray <- createBetaArray(original = myOriginal,
rho = rho,
gamma0 = gamma0)
=======
>>>>>>> 8d0852f23676049f3b45e12c4f1679d48f3ba236
devtools::load_all(".")
if (!require("rstudioapi"))
install.packages("rstudioapi")
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
size = 10
psi = 0.5
# psi = 0 # makes it iid
sigma = 1
mean = 0
rho = rep(0, length = size-1)
rho [1] = psi / (1 + psi ^ 2)
gamma0 = sigma ^ 2 * (1 + psi ^ 2)
myOriginal <- createOriginalMA1(size = size,
psi = psi,
sigma = sigma)
myBetaArray <- createBetaArray(original = myOriginal,
rho = rho,
gamma0 = gamma0)
#' @title createBetaArray
#'
#' @name createBetaArray
#'
#' @aliases createBetaArray
#'
#' @description Creating a two-dimensional array of dimensions \code{c(size - 1, size)}.
#'
#' @param original A one-dimensional array created using \code{stats::arima.sim()}, passing \code{size} as the length of the array.
#' @param rho A \code{rho} parameter.
#' @param gamma0 A \code{gamma0} parameter, the true variance of the process.
#'
#' @return Returning a two-dimensional array of dimensions \code{c(size - 1, size)}.
#'
#' @examples
#' original <- createOriginalMA1(size = 10, psi = 0.5, sigma = 1)
#' createBetaArray <- function(original, rho = 0.5)
#'
#' @export
createBetaArray <- function(original,
rho,
gamma0) {
size <- length(original)
betaArray <- array(NA, dim = c(size-1, size))
lag = 1
while ((size - lag) > 0) {
for (rowIndex in 1:(size - 1)) {
for (colIndex in 1:(size - lag + 1)) {
myBeta =
original[rowIndex] *
# (original[colIndex + lag - 1] - rho[rowIndex] * original[rowIndex])
(original[colIndex + lag - 1] - rho * original[rowIndex])
betaArray[rowIndex, colIndex] <- myBeta
}
lag = lag + 1
}
}
betaArray [, 1] = 0
betaArray = betaArray / gamma0
# betaArray <- array(as.numeric(unlist(betaArray)), dim = c(size-1, size))
# betaArray <- as.data.frame(betaArray)
# colnames(betaArray) <- as.character(0:(length(original) - 1))
betaArray
}
devtools::load_all("C:/Users/Boris/OneDrive/text/toronto_u/research/zhou/r/product2/product2")
if (!require("rstudioapi"))
install.packages("rstudioapi")
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
size = 10
psi = 0.5
# psi = 0 # makes it iid
sigma = 1
mean = 0
rho = rep(0, length = size-1)
rho [1] = psi / (1 + psi ^ 2)
gamma0 = sigma ^ 2 * (1 + psi ^ 2)
myOriginal <- createOriginalMA1(size = size,
psi = psi,
sigma = sigma)
myBetaArray <- createBetaArray(original = myOriginal,
rho = rho,
gamma0 = gamma0)
devtools::load_all("C:/Users/Boris/OneDrive/text/toronto_u/research/zhou/r/product2/product2")
if (!require("rstudioapi"))
install.packages("rstudioapi")
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
size = 10
psi = 0.5
# psi = 0 # makes it iid
sigma = 1
mean = 0
rho = rep(0, length = size-1)
rho [1] = psi / (1 + psi ^ 2)
gamma0 = sigma ^ 2 * (1 + psi ^ 2)
myOriginal <- createOriginalMA1(size = size,
psi = psi,
sigma = sigma)
myBetaArray <- createBetaArray(original = myOriginal,
rho = rho,
gamma0 = gamma0)
devtools::load_all("C:/Users/Boris/OneDrive/text/toronto_u/research/zhou/r/product2/product2")
if (!require("rstudioapi"))
install.packages("rstudioapi")
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
size = 10
psi = 0.5
# psi = 0 # makes it iid
sigma = 1
mean = 0
rho = rep(0, length = size-1)
rho [1] = psi / (1 + psi ^ 2)
gamma0 = sigma ^ 2 * (1 + psi ^ 2)
myOriginal <- createOriginalMA1(size = size,
psi = psi,
sigma = sigma)
myBetaArray <- createBetaArray(original = myOriginal,
rho = rho,
gamma0 = gamma0)
devtools::load_all("C:/Users/Boris/OneDrive/text/toronto_u/research/zhou/r/product2/product2")
if (!require("rstudioapi"))
install.packages("rstudioapi")
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
size = 10
psi = 0.5
# psi = 0 # makes it iid
sigma = 1
mean = 0
rho = rep(0, length = size-1)
rho [1] = psi / (1 + psi ^ 2)
gamma0 = sigma ^ 2 * (1 + psi ^ 2)
myOriginal <- createOriginalMA1(size = size,
psi = psi,
sigma = sigma)
myBetaArray <- createBetaArray(original = myOriginal,
rho = rho,
gamma0 = gamma0)
gamma <- rep(0, 2)
0.5 ^2
gamma <- rep(0, 2)
gamma[1] <- ((sigma ^ 2) * (1 + (psi ^ 2))) # a.k.a gamma0
sigma = 1
psi = 0.5
gamma[1] <- ((sigma ^ 2) * (1 + (psi ^ 2))) # a.k.a gamma0
gamma[2] <- (psi * (sigma ^ 2)) # a.k.a gamma0
gamma
gamma <- rep(0, 2)
gamma
library(product2)
